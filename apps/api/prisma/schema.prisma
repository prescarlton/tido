generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(nanoid(16))

  username  String @unique
  email     String @default("")
  firstName String @map("first_name")
  lastName  String @map("last_name")
  password  String @default("")

  projects     ProjectMember[]
  tasks        UserTask[]
  Task         Task[]
  TaskActivity TaskActivity[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("users")
}

model Session {
  id String @id

  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}

model UserTask {
  id String @id @default(nanoid(24))

  user   User   @relation(fields: [userId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])
  userId String @map("user_id")
  taskId String @map("task_id")

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("user_tasks")
}

model ProjectMember {
  id        String      @id @default(nanoid(24))
  projectId String      @map("project_id")
  userId    String      @map("user_id")
  role      ProjectRole @default(MEMBER)

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("project_members")
}

model Project {
  id          String @id @default(nanoid(8))
  name        String
  description String @default("")

  boards  Board[]
  members ProjectMember[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("projects")
}

model Board {
  id        String @id @default(nanoid(8))
  name      String
  projectId String @map("project_id")
  color     String @default("#03a9f4")

  project      Project      @relation(fields: [projectId], references: [id])
  tasks        Task[]
  taskStatuses TaskStatus[]
  taskTags     TaskTag[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("boards")
}

model BoardSettings {
  id String @id @default(nanoid(24))

  doneStatus   TaskStatus @relation(fields: [taskStatusId], references: [id])
  taskStatusId String

  @@map("board_settings")
}

model Task {
  id              String  @id @default(nanoid(24))
  code            Int
  name            String
  order           Int     @default(0)
  complete        Boolean @default(false)
  description     String? @db.VarChar(2000)
  archived        Boolean @default(false)
  boardId         String  @map("board_id")
  taskStatusId    String? @map("task_status_id")
  createdByUserId String  @map("created_by_user_id")

  createdBy    User           @relation(fields: [createdByUserId], references: [id])
  board        Board          @relation(fields: [boardId], references: [id])
  users        UserTask[]
  status       TaskStatus?    @relation(fields: [taskStatusId], references: [id])
  tags         TaskTag[]
  taskActivity TaskActivity[]

  updated DateTime @updatedAt
  created DateTime @default(now())

  @@map("tasks")
}

model TaskTag {
  id      String @id @default(nanoid(32))
  name    String
  color   String
  boardId String

  board Board  @relation(fields: [boardId], references: [id])
  tasks Task[]

  @@map("task_tags")
}

model TaskStatus {
  id      String @id @default(nanoid(24))
  name    String
  boardId String

  board         Board           @relation(fields: [boardId], references: [id])
  tasks         Task[]
  BoardSettings BoardSettings[]

  @@map("task_statuses")
}

model TaskActivity {
  id String @id @default(nanoid(36))

  taskId  String  @map("task_id")
  userId  String  @map("user_id")
  message String?
  oldVal  String? @map("old_val")
  newVal  String? @map("new_val")

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("task_activity")
}

enum ProjectRole {
  OWNER  @map("owner")
  ADMIN  @map("admin")
  MEMBER @map("member")
}
