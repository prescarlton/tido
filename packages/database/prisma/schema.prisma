generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(nanoid(16))

  username          String  @unique
  email             String? @unique
  firstName         String? @map("first_name")
  lastName          String? @map("last_name")
  password          String? @default("")
  activeWorkspaceId String? @map("active_workspace_id")

  activeWorkspace  Workspace?            @relation(fields: [activeWorkspaceId], references: [id])
  projects         ProjectUser[]
  tasks            UserTask[]
  createdTasks     Task[]
  taskActivity     TaskActivity[]
  favoriteProjects UserFavoriteProject[]
  projectActivity  ProjectActivity[]
  workspaces       WorkspaceUser[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("users")
}

model Session {
  id String @id

  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}

model UserTask {
  id String @id @default(nanoid(24))

  user   User   @relation(fields: [userId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])
  userId String @map("user_id")
  taskId String @map("task_id")

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("user_tasks")
}

model ProjectUser {
  id        String      @id @default(nanoid(24))
  projectId String      @map("project_id")
  userId    String      @map("user_id")
  role      ProjectRole @default(MEMBER)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("project_users")
}

model Workspace {
  id            String          @id @default(nanoid(12))
  name          String          @default("My Workspace")
  description   String          @default("")
  workspaceUser WorkspaceUser[]
  projects      Project[]

  // this is users that have this set as their 'active' workspace
  userActiveWorkspace User[]
  invites             WorkspaceInvite[]

  @@map("workspaces")
}

model WorkspaceUser {
  id Int @id @default(autoincrement())

  userId      String @map("user_id")
  workspaceId String @map("workspace_id")

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@map("workspace_users")
}

model Project {
  id          String  @id @default(nanoid(16))
  name        String
  description String  @default("")
  workspaceId String? @map("workspace_id")

  workspace Workspace? @relation(fields: [workspaceId], references: [id])

  boards        Board[]
  users         ProjectUser[]
  userFavorites UserFavoriteProject[]
  activity      ProjectActivity[]
  taskStatuses  TaskStatus[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("projects")
}

model Board {
  id        String @id @default(nanoid(16))
  name      String
  projectId String @map("project_id")
  color     String @default("#03a9f4")

  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks    Task[]
  taskTags TaskTag[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("boards")
}

model Task {
  id              String  @id @default(nanoid(24))
  code            Int
  name            String
  order           Int     @default(0)
  complete        Boolean @default(false)
  rawDescription  String? @map("raw_description") @db.LongText
  textDescription String? @map("text_description") @db.VarChar(500)
  archived        Boolean @default(false)
  boardId         String? @map("board_id")
  taskStatusId    Int     @map("task_status_id")
  createdByUserId String  @map("created_by_user_id")

  createdBy User           @relation(fields: [createdByUserId], references: [id])
  board     Board?         @relation(fields: [boardId], references: [id])
  users     UserTask[]
  status    TaskStatus     @relation(fields: [taskStatusId], references: [id])
  tags      TaskTag[]
  activity  TaskActivity[]

  updated DateTime @updatedAt
  created DateTime @default(now())

  @@map("tasks")
}

model TaskTag {
  id      Int    @id @default(autoincrement())
  name    String
  color   String
  boardId String @map("board_id")

  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("task_tags")
}

model TaskStatus {
  id        Int    @id @default(autoincrement())
  name      String
  color     String
  projectId String @map("project_id")
  order     Int    @default(1)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@unique([projectId, name])
  @@map("task_statuses")
}

model TaskActivity {
  id Int @id @default(autoincrement())

  taskId  String  @map("task_id")
  userId  String  @map("user_id")
  message String?
  oldVal  String? @map("old_val") @db.LongText
  newVal  String? @map("new_val") @db.LongText

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("task_activity")
}

model ProjectActivity {
  id Int @id @default(autoincrement())

  projectId String  @map("project_id")
  userId    String? @map("user_id")
  message   String

  user    User?   @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@map("project_activity")
}

model UserFavoriteProject {
  id Int @id @default(autoincrement())

  userId    String @map("user_id")
  projectId String @map("project_id")

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("user_favorite_projects")
}

model WorkspaceInvite {
  id Int @id @default(autoincrement())

  workspaceId String @map("workspace_id")
  email       String
  code        String @unique

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@map("workspace_invites")
}

enum ProjectRole {
  OWNER  @map("owner")
  ADMIN  @map("admin")
  MEMBER @map("member")
}
